from array import *

def insert(array1,index,element):
    array1.insert(index,element)

def traverse(array1):
    for x in array1:
        print(x,end=" ")

def delete(array1,element):
    array1.remove(element)

def search(array1, n, element):
    for i in range(n):
        if (array1[i] == element):
            return i
    return -1

if __name__ == '__main__':
    array1 = array('i', [10,20,30,40,50])
    traverse(array1)
    n = len(array1)
    index = int(input("\nEnter index at which element to be inserted:"))
    element = int(input("\nEnter element to be inserted:"))
    insert(array1,index,element)
    print("Array after Insertion")
    traverse(array1)
    element = int(input("\nEnter element to be deleted:"))
    delete(array1,element)
    print("Array after deletion")
    traverse(array1)
    element = int(input("\nEnter element to be searched:"))
    index = search(array1, n, element)
    if index !=-1:
        print("Element Found at position: " + str(index + 1))
    else:
        print("Element not found")

_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________

#Stack

class Stack:
    def __init__(self):
        self.elements=[]

    def push(self,data):
        self.elements.append(data)
        return data

    def pop(self):
        if self.is_empty():
            print('Stack is Empty.')
        else:
            print('Popped Value: ',self.elements[-1])
            self.elements.pop()

    def peek(self):
        return self.elements[-1]

    def is_empty(self):
        return len(self.elements) == 0

stack = Stack()
print(stack.is_empty())
stack.push(1)
stack.push(2)
stack.push(3)
stack.push(4)
stack.push(5)
print(stack.is_empty())
print(stack.peek())
print(stack.peek())
stack.pop()
stack.pop() 
stack.pop() 
stack.pop() 
stack.pop() 
stack.pop() 
print(stack.is_empty())

_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________

#Queue

class Queue:
    def __init__(self):
        self.queue = []

    def enqueue(self,item):
        self.queue.append(item)

    def dequeue(self):
        if len(self.queue)<1:
            return None
        return self.queue.pop(0)

    def display(self):
        print(self.queue)

    def size(self):
        print(len(self.queue))

q = Queue()
q.enqueue(34)
q.enqueue(45)
q.enqueue(69)
q.enqueue(34)
q.enqueue(25)
q.size()
q.display()
q.dequeue()
print("After removing an element")
q.display()

_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________

#Hash Table

hash_table = [[] for _ in range(10)]
print(hash_table)

def insert(hash_table, key, value):
    hash_key = hash(key) % len(hash_table)
    key_exists=False
    bucket=hash_table[hash_key]
    for i,kv, in enumerate(bucket):
        k,v=kv
        if key==k:
            key_exists=True
            break
    if key_exists:
        bucket[i]=((key,value))
    else:
        bucket.append((key,value))

def search(hash_table,key):
    hash_key = hash(key) % len(hash_table)
    bucket = hash_table[hash_key]
    for i,kv in enumerate(bucket):
        k,v = kv
        if key == k:
            return v

def delete(hash_table, key):
    hash_key = hash(key) % len(hash_table)
    key_exists=False
    bucket=hash_table[hash_key]
    for i,kv, in enumerate(bucket):
        k,v=kv
        if key==k:
            key_exists=True
            break
    if key_exists:
        del bucket[i]
        print('Key{} deleted'.format(key))
    else:
        print('Key{} not found'.format(key))

insert(hash_table,10,'Nepal')
insert(hash_table,25,'USA')
insert(hash_table,20,'India')
print(hash_table)

print(search(hash_table,10))
print(search(hash_table,20))
print(search(hash_table,30))

delete(hash_table,100)
print(hash_table)
delete(hash_table,20)
print(hash_table)

______________________________________________________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________________________________________________

#Function to display hashtable 
def display_hash(hashTable):
    for i in range(len(hashTable)):
        print(i, end=" ")

        for j in hashTable[i]:
            print("-->", end=" ")
            print(j, end=" ")

        print()

#Creating Hashtable as a nested list.
HashTable = [[] for _ in range(10)]

#Hashing Function to return key for every value.
def Hashing(keyvalue):
    return keyvalue % len(HashTable)

#Insert Function to add values to the hash table
def insert(Hashtable, keyvalue, value):
    hash_key = Hashing(keyvalue)
    Hashtable[hash_key].append(value)

#Driver Code 
insert(HashTable, 10, 'Allahabad')
insert(HashTable, 25, 'Mumbai')
insert(HashTable, 20, 'Mathura')
insert(HashTable, 9, 'Delhi')
insert(HashTable, 21, 'Punjab')
insert(HashTable, 21, 'Noida')

display_hash(HashTable)

______________________________________________________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________________________________________________

#Doubly Linked List

#pract : 2

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insertAtBegin(self,data):
        temp = Node(data)
        if self.head == None:
            self.head = temp
        else:
            temp.next = self.head
            self.head.prev = temp
            self.head = temp

    def insertAtEnd(self,data):
        temp = Node(data)
        if self.head == None:
            self.head = temp
        else:
            curr = self.head
            while curr.next != None:
                curr = curr.next
            curr.next = temp
            temp.prev = curr

    def traverse(self):
        curr = self.head
        while curr != None:
            print(curr.data)
            curr = curr.next 

    def insertAtGivenPosition(self,data,position):
        count = 1
        curr = self.head
        while count < position-1 and curr != None:
            curr = curr.next
            count += 1
        temp = Node(data) 
        temp.next = curr.next
        temp.next.prev = temp
        curr.next = temp
        temp.prev = curr

    def delFromBegin(self):
        try:
            if self.head == None:
                raise Exception("Empty Linked List")
            else:
                temp = self.head
                self.head = temp.next
                self.head.prev = None
                temp.next = None
                del temp
        except Exception as e:
                print(str(e))

    def delFromEnd(self):
        try:
            if self.head == None:
                raise Exception("Empty Linked List")
            else:
                curr = self.head
                prev = None
                while curr.next != None:
                    curr = curr.next
                curr.prev.next = None
                curr.prev = None
                del curr
        except Exception as e:
            print(str(e))

    def delAtPosition(self,position):
        try:
            if self.head == None:
                raise Exception("Empty Linked List")
            else:
                temp = self.head
                count = 1
                while temp != None and count < position:
                    curr = temp
                    temp = temp.next
                    count += 1
                curr.next = temp.next
                temp.next.prev = curr
                temp.next = None
                temp.prev = None
                del curr
        except Exception as e:
            print(str(e))

def main():
    ll = DoublyLinkedList()
    ll.insertAtBegin(10)
    ll.insertAtBegin(20)
    ll.insertAtBegin(30)
    ll.insertAtBegin(40)
    ll.traverse()
    print()
    ll.insertAtEnd(50)
    ll.traverse()
    print()
    ll.insertAtBegin(60)
    ll.traverse()
    print()
    ll.insertAtGivenPosition(70,3)
    ll.traverse()
    print()
    ll.delFromBegin()
    ll.traverse()
    print()
    ll.delFromEnd()
    ll.traverse()
    print()
    ll.delAtPosition(4)
    ll.traverse()
    
main()
            

______________________________________________________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________________________________________________

#Singly Linked List

#pract : 2

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        self.prev= None

class LinkedList:
    def __init__(self):
        self.head = None

    def insertAtBegin(self,data):
        temp = Node(data)
        if self.head == None:
            self.head = temp
        else:
            temp.next = self.head
            self.head = temp

    def insertAtEnd(self,data):
        temp = Node(data)
        if self.head == None:
            self.head = temp
        else:
            curr = self.head
            while curr.next != None:
                curr = curr.next
            curr.next = temp

    def insertAtGivenPosition(self,data,position):
        count = 1
        curr = self.head
        while count < position-1 and curr != None:
            curr = curr.next
            count += 1 #count = count + 1
        temp = Node(data)   
        temp.next = curr.next 
        curr.next = temp

    def traverse(self):
        curr = self.head
        while curr != None:
            print(curr.data)
            curr = curr.next

    def delFromBegin(self):
        try:
            if self.head == None:
                raise Exception("Empty Linked List")
            else:
                temp = self.head
                self.head = self.head.next
                del temp
        except Exception as e:  
                print(str(e))  

    def delFromEnd(self):
        try:
            if self.head == None:
                raise Exception("Empty Linked List")
            else:
                curr = self.head
                prev = None
                while curr.next != None:
                    prev = curr
                    curr = curr.next
                prev.next = curr.next
                del curr
        except Exception as e:
            print(str(e))

    def delAtPosition(self,position):
        try:
            if self.head == None:
                raise Exception("Empty Linked List")
            else:
                curr = self.head
                prev = None
                count = 1
                while curr != None and count < position:
                    prev = curr
                    curr = curr.next
                    count += 1
                prev.next = curr.next
                del curr
        except Exception as e:
            print(str(e))

def main():
    ll = LinkedList()
    ll.insertAtBegin(10)
    ll.insertAtBegin(20)
    ll.insertAtBegin(30)
    ll.insertAtBegin(40)
    ll.traverse()
    print()
    ll.insertAtEnd(50)
    ll.traverse()
    print()
    ll.insertAtBegin(60)
    ll.traverse()
    print()
    ll.insertAtGivenPosition(70,3)
    ll.traverse()
    print()
    ll.delFromBegin()
    ll.traverse()
    print()
    ll.delFromEnd()
    ll.traverse()
    print()
    ll.delAtPosition(4)
    ll.traverse()
    
main()
            
______________________________________________________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________________________________________________

#Travelling Salesman Problem

#Write a program to implement Travelling Salesman Problem.

from sys import maxsize
from itertools import permutations

V=4

def travellingSalesmanProblem(graph,s):
    vertex=[]
    for i in range(V):
        if i!=s:
            vertex.append(i)
        print(vertex)
        min_path = maxsize
        print(min_path)
        next_permutation=permutations(vertex)
        print(next_permutation)
        for i in next_permutation:
            print(i)
            current_pathweight = 0
            k = s
            for j in i:
                current_pathweight += graph[k][j]
                k = j
            current_pathweight += graph[k][s]
            print(current_pathweight)
            min_path = min(min_path, current_pathweight)
        return min_path
    graph = [[0, 10, 15, 20], [10, 0, 35, 25],[15, 35, 0, 30], [20, 25, 30, 0]]
    s = 0
    print("Minimum cost is: ",travellingSalesmanProblem(graph, s))

travellingSalesmanProblem([[0, 10, 15, 20], [10, 0, 35, 25],[15, 35, 0, 30], [20, 25, 30, 0]],0)

______________________________________________________________________________________________________________________________________________________________________
______________________________________________________________________________________________________________________________________________________________________

